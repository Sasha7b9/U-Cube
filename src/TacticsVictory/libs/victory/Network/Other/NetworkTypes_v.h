// 2021/04/07 20:38:43 (c) Aleksandr Shevchenko e-mail : Sasha7b9@tut.by
#pragma once


// Обрабатываемые мастер-сервером запросы
#define MSG_NTW_PING                "ping"                  // запрос пинга
#define MSG_NTW_INFO_LIVINGROOM     "info_livingroom"       // Этим сообщением гостиная сообщает мастер-серверу о
                                                            // своём состоянии
#define MSG_NTW_SET_NAME_LIVINGROOM "set_name_livingrom"    // Установка имени гостиной
                                                            // Запрос смещения порта гостевой комнаты относительно

#define MSG_NTW_GET                 "get"
#define MSG_NTW_GET_PORT_LIVINGROOM_BROADCAST_UDP MSG_NTW_GET " port livingroom_broadcast_udp"   // порта мастер-сервера


struct ServerTask
{
    ServerTask(pFuncUV _request, pFuncpCpVU _handler_answer, int64 _delta_time = 1000, uint _counter = 0xFFFFFFFF)
        : request(_request), handler_answer(_handler_answer), delta_time(_delta_time),
        prev_time(0), last_tive_receive(0),  counter(_counter)
    { }

    pFuncUV    request = nullptr;           // Обработчик запроса. Должен возвращать id запроса
    pFuncpCpVU handler_answer = nullptr;    // Обработчик ответа
    int64      delta_time = 0;              // Через такие промежутки времени выполнять задание
    int64      prev_time = 0;
    int64      last_tive_receive = 0;
    uint       counter = 0xFFFFFFFF;        // Столько раз выполнять задачу

    // Возвращает true, если существуют выполненные задания (те, у которых счётчик == 0)
    static bool ExistCompleted(std::vector<ServerTask *> &tasks);
};


struct SockAddrIn
{
    void Init(uint16 family, pchar ip, uint16 port);

    // Возвращает количество принятых байт
    int RecvFrom(evutil_socket_t socket, char *buffer, int size_buffer);

    int Bind(evutil_socket_t socket);

    sockaddr *GetSockAddr();
    pchar GetIP();
    uint16 GetPort();

    void SetHostIP(void *ip);

    // Возвращает полный адрес клиента в виде "host:port"
    std::string ToStringFull() const;

    // Возвращает только ip-дарес клиента
    std::string ToStringHost() const;

    const sockaddr_in &GetSockAddrInConst() const { return addr; };

    sockaddr_in &GetSockAddrIn() {  return addr;  };

private:

    sockaddr_in addr = { 0 };
};


struct ClientMessage
{
    std::vector<uint8> raw;         // Здесь хранится принятое сообщение - сначала строка, а потом дополнительные
                                    // данные, если есть. Номер сообщения и размер не сохраняются.
                                    // Номер и размер рассчитываются и сохраняются в специальных переменных в
                                    // MoveRawFrom()
    uint number = 0;
    uint size = 0;

    std::vector<uint8> data;        // Данные сообщения, если таковые имюется.
    std::vector<std::string> words; // Разбитая на слова текстовая часть сообщения

    // Перемещает байты запроса из received в raw. При этом из искоходного вектора перемещённые данные удаляются
    void MoveRawFrom(std::vector<uint8> &received);

    void *GetRawData();             // Возвращает указатель на данные, если таковые имеются в сообщении

    static uint GetID(std::vector<uint8> &received);

    static uint GetSize(std::vector<uint8> &received);
};


struct ClientInfo
{
    uint          id = 0;
    SockAddrIn    address;          // Адрес клиента
    void         *bevnt = nullptr;  // Буфер событий libevent
    ClientMessage message;
};
