// (c) Aleksandr Shevchenko e-mail : Sasha7b9@tut.by
#include "stdafx.h"
#include "Core/Math_v.h"
#include "Scene/Level_.h"
#include "Scene/Terrain/SegmentTerrain_.h"
#include "Utils/GlobalFunctions.h"
#include "Utils/StringUtils.h"


Level::Level(Context *context) : Object(context)
{
    
}


static bool IsCorrectSymbol(char symbol)
{
    if(symbol == '+')
    {
        return true;
    }
    if(symbol == '-')
    {
        return true;
    }
    if(symbol >= '0' && symbol <= '9')
    {
        return true;
    }
    return false;
}


static int PushToVector(const char *data, Vector<float> *vec)
{
    char buffer[20] = {0};

    int retValue = 0;

    while(IsCorrectSymbol(*data))
    {
        char add[2] = {*data, 0};
        SU::Strcat(buffer, add);
        retValue++;
        data++;
    }

    float value = (float)atof(buffer);
    vec->Push(value);

    return retValue;
}


void Level::Load(const char *fileName)
{
    map.Clear();

    SharedPtr<File> fileRead;
    fileRead = new File(TheContext);

    fileRead->Open(fileName, FILE_READ);

    if (!fileRead->IsOpen())
    {
        fileRead->Open(GF::GetNameFile(fileName), FILE_READ);
    }

    if(fileRead->IsOpen())
    {
        String str = fileRead->ReadString();
        const char *data = str.CString();
        size_t sizeData = strlen(data);

        const char *end = data + sizeData;

        Vector<float> curString;

        while(data < end)
        {
            if(*data == '\n' || *data == 0x0d)
            {
                map.Push(curString);
                curString.Clear();
                data += 2;
                continue;
            }
            if(*data == ' ')
            {
                data++;
                continue;
            }
            if(IsCorrectSymbol(*data))
            {
                data += static_cast<uint64>(PushToVector(data, &curString));
            }
        }
    }
    else
    {
        LOGERROR("Can not load file");
    }

    fileRead->Close();

    uint numRows = map.Size();

    map.Resize((numRows / SegmentTerrain::WIDTH_Z) * SegmentTerrain::WIDTH_Z);


    uint numCols = map[0].Size();

    for (uint i = 0; i < map.Size(); i++)
    {
        map[i].Resize((numCols / SegmentTerrain::HEIGHT_X) * SegmentTerrain::HEIGHT_X);
    }
}


Vector<Vector<float> > Level::Create(int sizeZ, int sizeX)
{
    map.Clear();

    for (int x = 0; x < sizeX; x++)
    {
        Vector<float> str;
        for (int z = 0; z < sizeZ; z++)
        {
            str.Push(0.0f);
        }
        map.Push(str);
    }

    VariantMap eventData = GetEventDataMap();
    SendEvent(E_MAP_CHANGED, eventData);

    return map;
}


void Level::Clear()
{
    map.Clear();
    VariantMap eventData = GetEventDataMap();
    SendEvent(E_MAP_CHANGED, eventData);
}



